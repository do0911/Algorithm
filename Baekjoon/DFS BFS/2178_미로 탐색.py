'''

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	192 MB	70226	26201	16671	36.166%
문제
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

예제 입력 1
4 6
101111
101010
101011
111011
예제 출력 1
15
'''

from collections import deque

dx = [0, 0, 1, -1]      # 순서대로 오른쪽 왼쪽 아래 위
dy = [1, -1, 0, 0]

n, m = map(int, input().split())
a = [list(map(int, list(input()))) for _ in range(n)]
q = deque()
check = [[0] * m for _ in range(n)]  #방문했는지를 표시
dist = [[0] * m for _ in range(n)]   #가중치 표시

# 시작점
q.append((0, 0))
check[0][0] = True
dist[0][0] = 1

while q:
    x, y = q.popleft()
    for k in range(4):   # 상하좌우에 갈 수 있는지 탐색
        nx, ny = x + dx[k], y + dy[k]
        if 0 <= nx < n and 0 <= ny < m:  # 0보다 크고  n,m보다 작은지(맵 벗어나지 않는가)
            if check[nx][ny] == 0 and a[nx][ny] == 1:  # 방문하지 않은 곳이고 갈 수 있는 길인가
                q.append((nx, ny))
                dist[nx][ny] = dist[x][y] + 1  #가중치를 1더하여 표시
                check[nx][ny] = 1  #방문했다는 것을 표시

print(dist[n - 1][m - 1])

'''
a = [list(map(int, list(input()))) for _ in range(n)] 효율적으로 2차원 배열 입력
'''